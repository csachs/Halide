# Relevant GHA docs links:
# https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container
# https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio

name: Build PyPI nightlies

on:
  push:
    branches: [ main, pythonBuildFixes ]
  release:
    types: [ created ]

env:
  LLVM_VER: 19.0.0
  HALIDE_CMAKE_OPTS: -DCMAKE_BUILD_TYPE=Release -DWITH_DOCS=NO -DWITH_PYTHON_BINDINGS=NO -DWITH_TESTS=NO -DWITH_TUTORIALS=NO -DWITH_UTILS=NO -DCMAKE_INSTALL_PREFIX=local-halide
  DEV_PREFIX: b

permissions:
  contents: read  #  to fetch code (actions/checkout)
  packages: read  #  to fetch packages (docker)

jobs:
  pip-all:
    name: Package Halide Python bindings
    runs-on: ${{ matrix.buildplat[0] }}

    concurrency:
      group: pip-all-${{ matrix.buildplat[0] }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}-${{ matrix.python }}
      cancel-in-progress: true

    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      packages: read   #  to fetch packages (docker)

    strategy:
      fail-fast: false
      matrix:
        #python: [ cp38, cp39, cp310, cp311, cp312 ]
        #python: [ cp311 ]
        python: [ cp38 ]
        buildplat:
        # [runner, pytag, arch, halide-triple]
        #- [ubuntu-22.04, musllinux_x86_64, x86_64, x86-64-linux]
        - [ubuntu-22.04, musllinux_aarch64, aarch64, arm-64-linux]
        #- [macos-13, macosx_x86_64, x86_64, x86-64-osx]
        #- [macos-14, macosx_arm64, arm64, arm-64-osx]
        #- [windows-2022, win_amd64, x64, x86-64-windows]

    steps:
      - uses: actions/checkout@v4

      # cibuildwheel is confused by the presence of the .so
      # prebuilts for Hexagon and considers them an error.
      # Just pre-emptively remove them to avoid this.
      - name: Remove Hexagon prebuilts
        shell: bash
        run: rm -rf src/runtime/hexagon_remote/bin/

      - name: Log in to GitHub Container Registry
        if: runner.os == 'Linux'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3

      # We are doing a "wildcard" download so that we can grab the build regardless
      # of the commit hash in the name -- this is a little janky but seems to work;
      # we download to /tmp/buildbot.halide-lang.org/llvm-VER-TRIPLE-HASH.zst
      - name: Pull LLVM build
        shell: bash
        run: |
          rm -rf /tmp/llvm.zst
          export LLVM_ZST=$(curl --silent https://buildbot.halide-lang.org | grep -o 'llvm-${{ env.LLVM_VER }}-${{ matrix.buildplat[3] }}-.*\.zst')
          curl --output /tmp/llvm.zst https://buildbot.halide-lang.org/${LLVM_ZST}

      - name: Decompress LLVM build
        shell: bash
        run: |
          rm -rf local-llvm
          mkdir -p local-llvm
          cd local-llvm
          cmake -E tar xv /tmp/llvm.zst --zstd
          cd ..
          rm -rf /tmp/llvm.zst

      - name: Configure Halide (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: >
          cmake -G "Visual Studio 17 2022" -T ClangCL -A "${{ matrix.buildplat[2] }}" -S . -B halide-build ${{ env.HALIDE_CMAKE_OPTS }} -DLLVM_DIR=${{ github.workspace }}\local-llvm\lib\cmake\llvm

      - name: Configure Halide (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: >
          cmake -S . -B halide-build ${{ env.HALIDE_CMAKE_OPTS }} "-DCMAKE_OSX_ARCHITECTURES=${{ matrix.buildplat[2] }}" -DLLVM_DIR=${{ github.workspace }}/local-llvm/lib/cmake/llvm

      - name: Install ARM64 Cross-compiling infrastructure (Linux)
        if: matrix.buildplat[3] == 'arm-64-linux'
        run: |
          sudo apt update
          cat /etc/apt/sources.list
          ls /etc/apt/sources.list.d
          cat /etc/apt/sources.list.d/*
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-security main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-backports main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates main multiverse universe" | sudo tee -a /etc/apt/sources.list
          sudo dpkg --add-architecture arm64
          sudo apt update -o APT::Architecture="arm64" -o APT::Architectures="arm64" -o Acquire::http::Timeout="2" || true
          sudo apt install -y libc6:arm64 libgcc-s1:arm64

      - name: Configure Halide (Linux)
        if: runner.os == 'linux'
        shell: bash
        run: >
          cmake -S . -B halide-build ${{ env.HALIDE_CMAKE_OPTS }} -DLLVM_DIR=${{ github.workspace }}/local-llvm/lib/cmake/llvm

      - name: Build Halide
        shell: bash
        run: cmake --build halide-build --target install --config Release

      - name: Install Halide
        shell: bash
        run: cmake --install halide-build --config Release
      
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        if: runner.os == 'Linux'

      - name: Build Wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/local-halide
          SKBUILD_CMAKE_ARGS: -DHalide_DIR=${{ github.workspace }}/local-halide/lib/cmake/llvm
          CIBW_ARCHS_LINUX: "${{ matrix.buildplat[2] }}"
          CIBW_ARCHS_MACOS: "${{ matrix.buildplat[2] }}"
          CIBW_BUILD: "${{ matrix.python }}-${{ matrix.buildplat[1] }}"
          CIBW_CONFIG_SETTINGS: --global-option=egg_info --global-option=--tag-build=${{ env.DEV_PREFIX }} --global-option=--tag-date
          CIBW_BEFORE_ALL: find ${{ github.workspace }}/local-halide; find .

      - uses: actions/upload-artifact@v4
        with:
          name: "wheels-${{ matrix.python }}-${{ matrix.buildplat[3] }}"
          path: ./wheelhouse/*.whl

  # publish:
  #   name: Publish on PyPI
  #   needs: [ pip-all ]
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: wheels
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@v1.8.11
  #       with:
  #         user: __token__
  #         password: ${{ secrets.TEST_PYPI_TOKEN }}
  #         repository_url: https://test.pypi.org/legacy/
  #         verbose: true

  #     # - uses: pypa/gh-action-pypi-publish@1.8.11
  #     #   if: github.event_name == 'release' && github.event.action == 'published'
  #     #   with:
  #     #     user: __token__
  #     #     password: ${{ secrets.PYPI_TOKEN }}